ASM is an all purpose Java bytecode manipulation and analysis framework. It can be used to modify existing classes or to dynamically generate classes, directly in binary form. ASM provides some common bytecode transformations and analysis algorithms from which custom complex transformations and code analysis tools can be built. ASM offers similar functionality as other Java bytecode frameworks, but is focused on performance. Because it was designed and implemented to be as small and as fast as possible, it is well suited for use in dynamic systems (but can of course be used in a static way too, e.g. in compilers).

ASM is used in many projects, including:

the OpenJDK, to generate the lambda call sites, and also in the Nashorn compiler,
the Groovy compiler and the Kotlin compiler,
Cobertura and Jacoco, to instrument classes in order to measure code coverage,
CGLIB, to dynamically generate proxy classes (which are used in other projects such as Mockito and EasyMock),
Gradle, to generate some classes at runtime.
Download
ASM can be downloaded from the OW2 Maven repository (which provides releases and snapshots), or from the Maven Central repository (releases only). Artifacts are signed with the public key in KEY.txt. The source code is hosted on Gitlab.

Recent news
29 September 2019: release of ASM 7.2